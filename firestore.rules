rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if a user is connected to another user
    function isConnectedUser(userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/connections/$(userId));
    }

    // Helper function to check if only connections field is being modified
    function isOnlyConnectionsUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['connections']);
    }

    // Helper function to check if only joiners field is being modified
    function isOnlyJoinersUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['joiners']);
    }

    // Helper function to check if user is a joiner of the activity
    function isJoiner(activityData) {
      return activityData.joiners != null && 
        activityData.joiners[request.auth.uid] != null;
    }

    // Rules for users collection
    match /users/{userId} {
      // Allow users to read and write their own document
      allow read, write: if isOwner(userId);
      
      // Allow users to read other users' documents (needed for connection verification)
      allow read: if isAuthenticated();
      
      // Allow users to update their own connections or remove connections
      allow update: if isAuthenticated() && (
        // Allow updating own document
        isOwner(userId) ||
        // Allow modifying connections (adding or removing)
        (
          // Only allow updating the connections field
          isOnlyConnectionsUpdate() &&
          (
            // For adding connections: ensure the connection includes the current user's ID
            (
              request.resource.data.connections != null &&
              request.resource.data.connections[request.auth.uid] != null
            ) ||
            // For removing connections: ensure the current user had a connection
            resource.data.connections[request.auth.uid] != null
          )
        )
      );
    }

    // Rules for activities collection
    match /activities/{activityId} {
      // Allow users to read activities if they:
      // 1. Created the activity
      // 2. Are a joiner of the activity
      // 3. Are connected to the activity creator
      // 4. Have the exact activity ID (for shared activities)
      allow read: if isAuthenticated();
      
      // Allow users to create new activities
      allow create: if isAuthenticated();

      // Allow users to update activities if they:
      // 1. Own the activity (full update)
      // 2. Are connected to the owner or only updating joiners field (to allow joining via direct link)
      allow update: if isAuthenticated() && (
        // Allow full updates if user owns the activity
        resource.data.userId == request.auth.uid ||
        // Allow joiners updates if user is connected to activity owner OR is only adding themselves as a joiner
        (
          isOnlyJoinersUpdate() && (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.connections[resource.data.userId] != null ||
            // Allow any authenticated user to update joiners if they're adding themselves (for direct links)
            (
              request.resource.data.joiners[request.auth.uid] != null &&
              (
                // If they're adding themselves as a new joiner
                resource.data.joiners == null ||
                resource.data.joiners[request.auth.uid] == null ||
                // Or if they're updating their existing joiner entry
                resource.data.joiners[request.auth.uid] != null
              )
            )
          )
        )
      );

      // Allow users to delete only their own activities
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Allow listing activities
      allow list: if isAuthenticated();
    }
  }
} 