rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if only connections field is being modified
    function isOnlyConnectionsUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['connections']);
    }

    // Helper function to check if only joiners field is being modified
    function isOnlyJoinersUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['joiners']);
    }

    // Helper function to check if user is a joiner of the activity
    function isJoiner(activityData) {
      return activityData.joiners != null && 
        activityData.joiners[request.auth.uid] != null;
    }

    // Rules for users collection
    match /users/{userId} {
      // Allow users to read and write their own document
      allow read, write: if isOwner(userId);
      
      // Allow users to read other users' documents (needed for connection verification)
      allow read: if isAuthenticated();
      
      // Allow users to update their own connections or remove connections
      allow update: if isAuthenticated() && (
        // Allow updating own document
        isOwner(userId) ||
        // Allow modifying connections (adding or removing)
        (
          // Only allow updating the connections field
          isOnlyConnectionsUpdate() &&
          (
            // For adding connections: ensure the connection includes the current user's ID
            (
              request.resource.data.connections != null &&
              request.resource.data.connections[request.auth.uid] != null
            ) ||
            // For removing connections: ensure the current user had a connection
            resource.data.connections[request.auth.uid] != null
          )
        )
      );
    }

    // Rules for activities collection
    match /activities/{activityId} {
      // Allow users to read activities if they are authenticated
      allow read: if isAuthenticated();
      
      // Allow users to create new activities
      allow create: if isAuthenticated();

      // Allow users to update activities if they:
      // 1. Own the activity (full update)
      // 2. Are joining or leaving the activity
      allow update: if isAuthenticated() && (
        // Allow full updates if user owns the activity
        resource.data.userId == request.auth.uid ||
        // Allow joiners updates if:
        (
          // Only updating joiners field
          isOnlyJoinersUpdate() &&
          (
            // User is joining (adding themselves to joiners)
            (
              // User is not currently a joiner
              !(request.auth.uid in resource.data.joiners) &&
              // User appears in new joiners
              request.resource.data.joiners[request.auth.uid] != null &&
              // All other joiners remain unchanged
              resource.data.joiners.size() + 1 == request.resource.data.joiners.size()
            ) ||
            // OR user is leaving (removing themselves from joiners)
            (
              // User is currently a joiner
              resource.data.joiners[request.auth.uid] != null &&
              // User is not in new joiners
              !(request.auth.uid in request.resource.data.joiners) &&
              // All other joiners remain unchanged
              resource.data.joiners.size() == request.resource.data.joiners.size() + 1
            )
          )
        )
      );

      // Allow users to delete only their own activities
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Allow listing activities
      allow list: if isAuthenticated();
    }
  }
} 